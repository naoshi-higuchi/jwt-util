package org.nopware.jwt_util;

import com.auth0.jwt.algorithms.Algorithm;
import org.nopware.jwt_util.psalg.PS256;
import org.nopware.jwt_util.psalg.PS384;
import org.nopware.jwt_util.psalg.PS512;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;

public class Algorithms {
    /**
     * Returns an algorithm for signing.
     * <p>
     *     For HS256, HS384, HS512, The key (secret) is in binary format. (Generated by `openssl rand`)
     *     For RS256, RS384, RS512, PS256, PS384, PS512, ES256, ES384, ES512, The key is in PEM format. (Generated by `openssl genpkey`)
     *
     * @param alg the algorithm
     * @param key the key or secret
     * @return Algorithm object for signing
     * @throws IOException if the key cannot be read
     * @throws NoSuchAlgorithmException if the algorithm is not supported
     * @throws InvalidKeySpecException if the key is invalid
     */
    public static Algorithm forSigning(Alg alg, byte[] key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        return switch (alg) {
            case HS256 -> Algorithm.HMAC256(key);
            case HS384 -> Algorithm.HMAC384(key);
            case HS512 -> Algorithm.HMAC512(key);
            case RS256 -> {
                RSAPrivateKey rsaPrivateKey256 = KeyUtil.readRSAPrivateKey(key);
                yield Algorithm.RSA256(null, rsaPrivateKey256);
            }
            case RS384 -> {
                RSAPrivateKey rsaPrivateKey384 = KeyUtil.readRSAPrivateKey(key);
                yield Algorithm.RSA384(null, rsaPrivateKey384);
            }
            case RS512 -> {
                RSAPrivateKey rsaPrivateKey512 = KeyUtil.readRSAPrivateKey(key);
                yield Algorithm.RSA512(null, rsaPrivateKey512);
            }
            case ES256 -> {
                ECPrivateKey ecPrivateKey256 = KeyUtil.readECPrivateKey(key);
                yield Algorithm.ECDSA256(null, ecPrivateKey256);
            }
            case ES384 -> {
                ECPrivateKey ecPrivateKey384 = KeyUtil.readECPrivateKey(key);
                yield Algorithm.ECDSA384(null, ecPrivateKey384);
            }
            case ES512 -> {
                ECPrivateKey ecPrivateKey521 = KeyUtil.readECPrivateKey(key);
                yield Algorithm.ECDSA512(null, ecPrivateKey521);
            }
            case PS256 -> {
                RSAPrivateKey rsaPrivateKey256 = KeyUtil.readRSAPSSPrivateKey(key);
                yield new PS256(null, rsaPrivateKey256);
            }
            case PS384 -> {
                RSAPrivateKey rsaPrivateKey384 = KeyUtil.readRSAPSSPrivateKey(key);
                yield new PS384(null, rsaPrivateKey384);
            }
            case PS512 -> {
                RSAPrivateKey rsaPrivateKey512 = KeyUtil.readRSAPSSPrivateKey(key);
                yield new PS512(null, rsaPrivateKey512);
            }
            case NONE -> Algorithm.none();
        };
    }
    public static Algorithm forVerifying(Alg alg, byte[] key) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        return switch (alg) {
            case HS256 -> Algorithm.HMAC256(key);
            case HS384 -> Algorithm.HMAC384(key);
            case HS512 -> Algorithm.HMAC512(key);
            case RS256 -> {
                RSAPublicKey rsaPublicKey256 = KeyUtil.readRSAPublicKey(key);
                yield Algorithm.RSA256(rsaPublicKey256, null);
            }
            case RS384 -> {
                RSAPublicKey rsaPublicKey384 = KeyUtil.readRSAPublicKey(key);
                yield Algorithm.RSA384(rsaPublicKey384, null);
            }
            case RS512 -> {
                RSAPublicKey rsaPublicKey512 = KeyUtil.readRSAPublicKey(key);
                yield Algorithm.RSA512(rsaPublicKey512, null);
            }
            case ES256 -> {
                ECPublicKey ecPublicKey256 = KeyUtil.readECPublicKey(key);
                yield Algorithm.ECDSA256(ecPublicKey256, null);
            }
            case ES384 -> {
                ECPublicKey ecPublicKey384 = KeyUtil.readECPublicKey(key);
                yield Algorithm.ECDSA384(ecPublicKey384, null);
            }
            case ES512 -> {
                ECPublicKey ecPublicKey521 = KeyUtil.readECPublicKey(key);
                yield Algorithm.ECDSA512(ecPublicKey521, null);
            }
            case PS256 -> {
                RSAPublicKey rsaPublicKey256 = KeyUtil.readRSAPSSPublicKey(key);
                yield new PS256(rsaPublicKey256, null);
            }
            case PS384 -> {
                RSAPublicKey rsaPublicKey384 = KeyUtil.readRSAPSSPublicKey(key);
                yield new PS384(rsaPublicKey384, null);
            }
            case PS512 -> {
                RSAPublicKey rsaPublicKey512 = KeyUtil.readRSAPSSPublicKey(key);
                yield new PS512(rsaPublicKey512, null);
            }
            case NONE -> Algorithm.none();
        };
    }
}
